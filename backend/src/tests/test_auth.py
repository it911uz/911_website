import pytest
from httpx import AsyncClient

from dependencies import get_current_user
from main import app
from models import User


@pytest.mark.asyncio
async def test_login_success(client: AsyncClient, monkeypatch):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""

    async def fake_login(self, username, password):
        return {
            "access_token": "access123",
            "refresh_token": "refresh123",
            "token_type": "bearer"
        }

    monkeypatch.setattr("services.auth_manager.AuthManager.login", fake_login)

    response = await client.post("/auth/token", data={"username": "user1", "password": "Password1!"})
    assert response.status_code == 201
    data = response.json()
    assert data["access_token"] == "access123"
    assert data["token_type"] == "bearer"


# -----------------------------------------------------------
# /auth/refresh ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
# -----------------------------------------------------------
@pytest.mark.asyncio
async def test_refresh_success(client: AsyncClient, monkeypatch):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""

    async def fake_refresh_token(self, token):
        return {
            "access_token": "new_access",
            "refresh_token": "new_refresh",
            "token_type": "bearer"
        }

    monkeypatch.setattr("services.auth_manager.AuthManager.refresh_token", fake_refresh_token)

    response = await client.post("/auth/refresh", json={"refresh_token": "refresh123"})
    assert response.status_code == 201
    data = response.json()
    assert data["access_token"] == "new_access"
    assert data["token_type"] == "bearer"


# -----------------------------------------------------------
# /auth/me ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------------------------------------
@pytest.mark.asyncio
async def test_me_success(client: AsyncClient, monkeypatch):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""

    fake_user = User(
        id=1,
        full_name="Test User",
        username="test_user",
        hashed_password="hashed123",
        is_superuser=False,
    )

    async def fake_current_user():
        return fake_user

    # üëá –ø–æ–¥–º–µ–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    app.dependency_overrides[get_current_user] = fake_current_user

    response = await client.get("/auth/me")
    assert response.status_code == 200
    data = response.json()
    assert data["username"] == "test_user"
    assert data["full_name"] == "Test User"


# -----------------------------------------------------------
# /auth/change-password ‚Äî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
# -----------------------------------------------------------
@pytest.mark.asyncio
async def test_change_password_success(client: AsyncClient, monkeypatch):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ‚Äî —É—Å–ø–µ—Ö."""

    async def fake_change_password(self, user, old, new):
        return None

    monkeypatch.setattr("services.auth_manager.AuthManager.change_password", fake_change_password)

    async def fake_current_user():
        return User(
            id=1,
            full_name="Test User",
            username="test_user",
            hashed_password="hashed123",
            is_superuser=False,
        )

    app.dependency_overrides[get_current_user] = fake_current_user

    response = await client.post(
        "/auth/change-password",
        json={"old_password": "OldPass1!", "new_password": "NewPass1!"},
    )
    assert response.status_code == 204

    app.dependency_overrides.clear()


@pytest.mark.asyncio
async def test_change_password_invalid_password(client: AsyncClient):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å."""

    async def fake_current_user():
        return User(
            id=1,
            full_name="Test User",
            username="test_user",
            hashed_password="hashed123",
            is_superuser=False,
        )

    app.dependency_overrides[get_current_user] = fake_current_user

    response = await client.post(
        "/auth/change-password",
        json={"old_password": "OldPass1!", "new_password": "short"},
    )
    assert response.status_code == 422

    app.dependency_overrides.clear()